"""empty message

Revision ID: f8d3ac1848b9
Revises: 1888b16f6b99
Create Date: 2024-07-04 22:52:34.174913

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f8d3ac1848b9'
down_revision = '1888b16f6b99'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Add a new column with UUID type
    op.add_column('user_role', sa.Column('new_id', postgresql.UUID(as_uuid=True), nullable=False, server_default=sa.text('uuid_generate_v4()')))
    # Copy data from old id column to new_id column (UUIDs will be generated)
    op.execute('UPDATE user_role SET new_id = uuid_generate_v4()')
    # Drop the old id column
    op.drop_column('user_role', 'id')
    # Rename the new_id column to id
    op.alter_column('user_role', 'new_id', new_column_name='id')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Add the old id column back with INTEGER type
    op.add_column('user_role', sa.Column('old_id', sa.Integer, nullable=False, server_default=sa.text('nextval(\'user_role_id_seq\'::regclass)')))
    # Note: Data copying back from UUID to INTEGER is not straightforward
    # Skipping data copying for downgrade
    # Drop the new id (UUID) column
    op.drop_column('user_role', 'id')
    # Rename the old_id column to id
    op.alter_column('user_role', 'old_id', new_column_name='id')

    # ### end Alembic commands ###
