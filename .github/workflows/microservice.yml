---
name: microservice

on:
  push:
    branches:
      - microservice
      - deploy/gcp

  workflow_dispatch:

jobs:
  build:
    outputs:
      image: ${{ steps.export.outputs.image }}
      tag: ${{ steps.export.outputs.tag }}

    runs-on: ubuntu-latest
    env:
      image: cranecloud/cranecloud-backend

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install (Buildx)
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: meta
        name: Tag
        uses: docker/metadata-action@v3
        with:
          flavor: |
            latest=true
          images: ${{ env.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build
        uses: docker/build-push-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - id: export
        name: Export
        uses: actions/github-script@v5
        with:
          script: |
            const metadata = JSON.parse(`${{ steps.meta.outputs.json }}`)
            const fullUrl = metadata.tags.find((t) => t.includes(':sha-'))
            if (fullUrl == null) {
              core.error('Unable to find sha tag of image')
            } else {
              const tag = fullUrl.split(':')[1]
              core.setOutput('image', fullUrl)
              core.setOutput('tag', tag)
            }

  Microservice:
    name: Deploy (Microservice)

    needs:
      - Build

    runs-on: ubuntu-latest
    env:
      namespace: cranecloud-microservice
      image: cranecloud/cranecloud-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # - uses: azure/k8s-set-context@v1
      #   with:
      #     kubeconfig: ${{ secrets.RENU_KUBECONFIG}}

      - name: Install (Gcloud)
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: crane-cloud-274413
          install_components: "gke-gcloud-auth-plugin"

      - name: Login (Kubernetes Cluster)
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: staging-cluster
          location: us-central1-a
          project_id: crane-cloud-274413

      - name: Add Repo (cranecloud)
        run: |
          helm repo add cranecloud https://crane-cloud.github.io/helm-charts/

      - name: Helm Release
        run: |
          helm upgrade --install --create-namespace \
          cranecloud-backend cranecloud/cranecloud \
          --values helm/values.micro.yaml \
          --namespace $namespace \
          --set image.tag="${{ needs.build.outputs.tag }}" \
          --set environment.ADMIN_MYSQL_PASSWORD="${{ secrets.STAGING_ADMIN_MYSQL_PASSWORD }}" \
          --set environment.ADMIN_PSQL_PASSWORD="${{ secrets.STAGING_ADMIN_PSQL_PASSWORD }}" \
          --set environment.APP_MAIL_PASSWORD="${{ secrets.STAGING_APP_MAIL_PASSWORD }}" \
          --set environment.DATABASE_URI="${{ secrets.MICROSERVICE_DATABASE_URI }}" \
          --set environment.MONGO_URI="${{ secrets.STAGING_MONGO_URI }}" \
          --set environment.FLASK_APP_SALT="${{ secrets.STAGING_FLASK_APP_SALT }}" \
          --set environment.FLASK_APP_SECRET="${{ secrets.STAGING_FLASK_APP_SECRET }}" \
          --set environment.GITHUB_CLIENT_SECRET="${{ secrets.STAGING_GITHUB_CLIENT_SECRET }}" \
          --set environment.NEW_RELIC_LICENSE_KEY="${{ secrets.STAGING_NEW_RELIC_LICENSE_KEY }}" \
          --set environment.KUBE_SERVICE_PORT="${{ secrets.STAGING_KUBE_SERVICE_PORT }}" \
          --set environment.LOGGER_APP_URL="${{ secrets.MICROSERVICE_LOGGER_APP_URL }}" \
          --timeout=300s

      - name: Monitor Rollout
        run: |
          kubectl rollout status deployment/cranecloud-backend --timeout=300s --namespace $namespace
